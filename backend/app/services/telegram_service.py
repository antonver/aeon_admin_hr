import os
import json
import asyncio
from telegram import Bot
from telegram.error import TelegramError
from dotenv import load_dotenv
from backend.app.database import Candidate, Notification, User
from sqlalchemy.orm import Session

load_dotenv()

class TelegramService:
    def __init__(self):
        self.bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
        self.chat_id = os.getenv("TELEGRAM_CHAT_ID")
        self.bot = Bot(token=self.bot_token) if self.bot_token else None
    
    async def send_message(self, candidate: Candidate, message: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—É –≤ Telegram"""
        if not self.bot or not candidate.telegram_id:
            return False
        
        try:
            chat_id = f"{candidate.telegram_id}"
            await self.bot.send_message(
                chat_id=chat_id,
                text=message,
                parse_mode='HTML'
            )
            return True
        except TelegramError as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
            return False
    
    async def send_notification(self, notification: Notification):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ HR-–º–µ–Ω–µ–¥–∂–µ—Ä—É"""
        if not self.bot or not self.chat_id:
            return False
        
        try:
            message = f"üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n"
            message += f"–¢–∏–ø: {notification.type}\n"
            message += f"–°–æ–æ–±—â–µ–Ω–∏–µ: {notification.message}\n"
            message += f"–í—Ä–µ–º—è: {notification.created_at.strftime('%d.%m.%Y %H:%M')}"
            
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=message,
                parse_mode='HTML'
            )
            return True
        except TelegramError as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {e}")
            return False
    
    async def send_test_invitation(self, candidate: Candidate):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Ç–µ—Å—Ç"""
        message = f"üéØ <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Ç–µ—Å—Ç</b>\n\n"
        message += f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {candidate.full_name}!\n\n"
        message += "–í–∞–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –ø–æ —Å–æ—Ñ—Ç-—Å–∫–∏–ª–ª–∞–º.\n"
        message += "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ—Å—Ç: https://forms.gle/example\n\n"
        message += "–£–¥–∞—á–∏! üöÄ"
        
        return await self.send_message(candidate, message)
    
    async def send_feedback(self, candidate: Candidate, feedback: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–¥–±—ç–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É"""
        message = f"üìù <b>–§–∏–¥–±—ç–∫ –ø–æ –∏–Ω—Ç–µ—Ä–≤—å—é</b>\n\n"
        message += f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {candidate.full_name}!\n\n"
        message += f"{feedback}\n\n"
        message += "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! üôè"
        
        return await self.send_message(candidate, message)
    
    async def send_test_message(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if not self.bot or not self.chat_id:
            return False
        
        try:
            message = "üß™ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n"
            message += "HR-–∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! ‚úÖ"
            
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=message,
                parse_mode='HTML'
            )
            return True
        except TelegramError as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    def create_webview_url(self, candidate_id: int) -> str:
        """–°–æ–∑–¥–∞—Ç—å URL –¥–ª—è WebView —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
        base_url = os.getenv("FRONTEND_URL", "http://localhost:3000")
        return f"{base_url}/candidate/{candidate_id}"
    
    async def send_candidate_card_link(self, candidate: Candidate):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
        if not self.bot or not self.chat_id:
            return False
        
        try:
            webview_url = self.create_webview_url(candidate.id)
            
            message = f"üë§ <b>–ö–∞—Ä—Ç–æ—á–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞</b>\n\n"
            message += f"–ò–º—è: {candidate.full_name}\n"
            message += f"–°—Ç–∞—Ç—É—Å: {candidate.status}\n"
            message += f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {candidate.last_action_type}\n\n"
            message += f"<a href='{webview_url}'>–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É</a>"
            
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=message,
                parse_mode='HTML',
                disable_web_page_preview=True
            )
            return True
        except TelegramError as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É: {e}")
            return False 
    
    async def send_candidate_data_formatted(self, candidate: Candidate, format: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ Telegram –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (csv, md, json)"""
        if not self.bot or not candidate.telegram_id:
            return False
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        data = {
            'ID': candidate.id,
            '–§–ò–û': candidate.full_name,
            'Telegram': candidate.telegram_username or '',
            # 'Email': candidate.email or '',
            # '–¢–µ–ª–µ—Ñ–æ–Ω': candidate.phone or '',
            '–°—Ç–∞—Ç—É—Å': candidate.status,
            '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ': candidate.last_action_type or '',
            '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è': candidate.created_at.strftime('%Y-%m-%d %H:%M') if candidate.created_at else '',
            '–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è': candidate.updated_at.strftime('%Y-%m-%d %H:%M') if candidate.updated_at else '',
        }
        if format == 'csv':
            text = ','.join(data.keys()) + '\n' + ','.join(str(v) for v in data.values())
        elif format == 'md':
            text = '### –î–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞\n' + '\n'.join([f'- **{k}:** {v}' for k, v in data.items()])
        elif format == 'json':
            
            text = json.dumps(data, ensure_ascii=False, indent=2)
        else:
            text = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.'
        try:
            chat_id = f"{candidate.telegram_id}"
            await self.bot.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode=None if format == 'json' or format == 'csv' else 'Markdown'
            )
            return True
        except TelegramError as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {e}")
            return False

    async def send_interview_notification_to_admins(self, candidate: Candidate, interview_log, db: Session):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤—å—é"""
        if not self.bot:
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admins = db.query(User).filter(User.is_admin == True).all()
        
        if not admins:
            print("–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return False
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üéØ <b>–ù–æ–≤–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é</b>\n\n"
        message += f"üë§ <b>–ö–∞–Ω–¥–∏–¥–∞—Ç:</b> {candidate.full_name}\n"
        message += f"üìù <b>–í–æ–ø—Ä–æ—Å:</b> {interview_log.question}\n"
        message += f"üí¨ <b>–û—Ç–≤–µ—Ç:</b> {interview_log.answer[:200]}{'...' if len(interview_log.answer) > 200 else ''}\n"
        
        if interview_log.score:
            message += f"‚≠ê <b>–û—Ü–µ–Ω–∫–∞:</b> {interview_log.score}/10\n"
        
        if interview_log.category:
            message += f"üè∑Ô∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {interview_log.category}\n"
        
        message += f"üìÖ <b>–í—Ä–µ–º—è:</b> {interview_log.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        webview_url = self.create_webview_url(candidate.id)
        message += f"<a href='{webview_url}'>üìã –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞</a>"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        success_count = 0
        for admin in admins:
            if admin.telegram_id:
                try:
                    await self.bot.send_message(
                        chat_id=admin.telegram_id,
                        text=message,
                        parse_mode='HTML',
                        disable_web_page_preview=True
                    )
                    success_count += 1
                except TelegramError as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin.name}: {e}")
        
        print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {success_count} –∏–∑ {len(admins)} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return success_count > 0

    async def send_interview_completion_notification(self, candidate: Candidate, total_questions: int, avg_score: float, db: Session):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤—å—é"""
        if not self.bot:
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admins = db.query(User).filter(User.is_admin == True).all()
        
        if not admins:
            print("–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return False
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
        status_emoji = "‚úÖ" if candidate.status == "–±–µ—Ä–µ–º" else "‚ùå"
        status_text = "–ë–ï–†–ï–ú" if candidate.status == "–±–µ—Ä–µ–º" else "–ù–ï –ë–ï–†–ï–ú"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"{status_emoji} <b>–ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ - {status_text}</b>\n\n"
        message += f"üë§ <b>–ö–∞–Ω–¥–∏–¥–∞—Ç:</b> {candidate.full_name}\n"
        message += f"üìä <b>–í–æ–ø—Ä–æ—Å–æ–≤:</b> {total_questions}\n"
        message += f"‚≠ê <b>–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞:</b> {avg_score:.1f}/10\n"
        message += f"üìÖ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–æ:</b> {candidate.updated_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        webview_url = self.create_webview_url(candidate.id)
        message += f"<a href='{webview_url}'>üìã –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞</a>"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        success_count = 0
        for admin in admins:
            if admin.telegram_id:
                try:
                    await self.bot.send_message(
                        chat_id=admin.telegram_id,
                        text=message,
                        parse_mode='HTML',
                        disable_web_page_preview=True
                    )
                    success_count += 1
                except TelegramError as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin.name}: {e}")
        
        print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {success_count} –∏–∑ {len(admins)} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return success_count > 0

    async def send_interview_start_notification(self, candidate: Candidate, db: Session):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∏–Ω—Ç–µ—Ä–≤—å—é"""
        if not self.bot:
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admins = db.query(User).filter(User.is_admin == True).all()
        
        if not admins:
            print("–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return False
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üé¨ <b>–ò–Ω—Ç–µ—Ä–≤—å—é –Ω–∞—á–∞–ª–æ—Å—å</b>\n\n"
        message += f"üë§ <b>–ö–∞–Ω–¥–∏–¥–∞—Ç:</b> {candidate.full_name}\n"
        message += f"üìÖ <b>–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:</b> {candidate.updated_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        webview_url = self.create_webview_url(candidate.id)
        message += f"<a href='{webview_url}'>üìã –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞</a>"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        success_count = 0
        for admin in admins:
            if admin.telegram_id:
                try:
                    await self.bot.send_message(
                        chat_id=admin.telegram_id,
                        text=message,
                        parse_mode='HTML',
                        disable_web_page_preview=True
                    )
                    success_count += 1
                except TelegramError as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin.name}: {e}")
        
        print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –∏–Ω—Ç–µ—Ä–≤—å—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {success_count} –∏–∑ {len(admins)} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return success_count > 0

    async def send_status_change_notification(self, candidate: Candidate, new_status: str, db: Session):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
        if not self.bot:
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admins = db.query(User).filter(User.is_admin == True).all()
        
        if not admins:
            print("–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return False
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
        status_emoji = {
            '–æ–∂–∏–¥–∞–µ—Ç': '‚è≥',
            '–ø—Ä–æ—à—ë–ª': '‚úÖ',
            '–ø—Ä–∏–≥–ª–∞—à—ë–Ω': 'üéâ',
            '–æ—Ç–∫–ª–æ–Ω—ë–Ω': '‚ùå'
        }
        
        emoji = status_emoji.get(new_status, 'üìä')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"{emoji} <b>–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω</b>\n\n"
        message += f"üë§ <b>–ö–∞–Ω–¥–∏–¥–∞—Ç:</b> {candidate.full_name}\n"
        message += f"üìä <b>–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:</b> {new_status}\n"
        message += f"üìÖ <b>–í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b> {candidate.updated_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        webview_url = self.create_webview_url(candidate.id)
        message += f"<a href='{webview_url}'>üìã –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞</a>"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        success_count = 0
        for admin in admins:
            if admin.telegram_id:
                try:
                    await self.bot.send_message(
                        chat_id=admin.telegram_id,
                        text=message,
                        parse_mode='HTML',
                        disable_web_page_preview=True
                    )
                    success_count += 1
                except TelegramError as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin.name}: {e}")
        
        print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {success_count} –∏–∑ {len(admins)} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return success_count > 0

    async def send_daily_summary(self, db: Session):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
        if not self.bot:
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admins = db.query(User).filter(User.is_admin == True).all()
        
        if not admins:
            print("–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        from datetime import datetime, timedelta
        today = datetime.utcnow().date()
        tomorrow = today + timedelta(days=1)
        
        total_candidates = db.query(Candidate).filter(
            Candidate.created_at >= today,
            Candidate.created_at < tomorrow
        ).count()
        
        passed_candidates = db.query(Candidate).filter(
            Candidate.status == '–ø—Ä–æ—à—ë–ª',
            Candidate.updated_at >= today,
            Candidate.updated_at < tomorrow
        ).count()
        
        rejected_candidates = db.query(Candidate).filter(
            Candidate.status == '–æ—Ç–∫–ª–æ–Ω—ë–Ω',
            Candidate.updated_at >= today,
            Candidate.updated_at < tomorrow
        ).count()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞</b>\n\n"
        message += f"üìÖ <b>–î–∞—Ç–∞:</b> {today.strftime('%d.%m.%Y')}\n"
        message += f"üë• <b>–ù–æ–≤—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤:</b> {total_candidates}\n"
        message += f"‚úÖ <b>–ü—Ä–æ—à–ª–∏ –∏–Ω—Ç–µ—Ä–≤—å—é:</b> {passed_candidates}\n"
        message += f"‚ùå <b>–û—Ç–∫–ª–æ–Ω–µ–Ω—ã:</b> {rejected_candidates}\n"
        
        if total_candidates > 0:
            success_rate = (passed_candidates / total_candidates) * 100
            message += f"üìà <b>–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞:</b> {success_rate:.1f}%\n"
        
        message += f"\nüéØ <b>–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!</b>"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        success_count = 0
        for admin in admins:
            if admin.telegram_id:
                try:
                    await self.bot.send_message(
                        chat_id=admin.telegram_id,
                        text=message,
                        parse_mode='HTML'
                    )
                    success_count += 1
                except TelegramError as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin.name}: {e}")
        
        print(f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–≤–æ–¥–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {success_count} –∏–∑ {len(admins)} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return success_count > 0 